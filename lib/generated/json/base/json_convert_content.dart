// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:desk_cloud/entity/guest_cool_down_entity.dart';
import 'package:flutter/material.dart' show debugPrint;
import 'package:desk_cloud/entity/app_init_entity.dart';
import 'package:desk_cloud/entity/app_version_entity.dart';
import 'package:desk_cloud/entity/auto_renewal_entity.dart';
import 'package:desk_cloud/entity/base_list_entity.dart';
import 'package:desk_cloud/entity/check_file_entity.dart';
import 'package:desk_cloud/entity/code_list_entity.dart';
import 'package:desk_cloud/entity/create_order_entity.dart';
import 'package:desk_cloud/entity/disk_dir_entity.dart';
import 'package:desk_cloud/entity/disk_file_detail_entity.dart';
import 'package:desk_cloud/entity/disk_file_entity.dart';
import 'package:desk_cloud/entity/file_pre_entity.dart';
import 'package:desk_cloud/entity/login_user_entity.dart';
import 'package:desk_cloud/entity/member_equity_entity.dart';
import 'package:desk_cloud/entity/member_products_entity.dart';
import 'package:desk_cloud/entity/notice_entity.dart';
import 'package:desk_cloud/entity/option_entity.dart';
import 'package:desk_cloud/entity/pay_entity.dart';
import 'package:desk_cloud/entity/prelogin_entity.dart';
import 'package:desk_cloud/entity/preview_entity.dart';
import 'package:desk_cloud/entity/recycle_list_entity.dart';
import 'package:desk_cloud/entity/search_init_entity.dart';
import 'package:desk_cloud/entity/search_result_entity.dart';
import 'package:desk_cloud/entity/share_code_entity.dart';
import 'package:desk_cloud/entity/share_data_entity.dart';
import 'package:desk_cloud/entity/socket_entity.dart';
import 'package:desk_cloud/entity/sts_entity.dart';
import 'package:desk_cloud/entity/transfer_record_entity.dart';
import 'package:desk_cloud/entity/unzip_entity.dart';
import 'package:desk_cloud/entity/unzip_progress_entity.dart';
import 'package:desk_cloud/entity/upload_file_entity.dart';
import 'package:desk_cloud/entity/vip_powers_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AppInitEntity>[] is M) {
      return data.map<AppInitEntity>((Map<String, dynamic> e) =>
          AppInitEntity.fromJson(e)).toList() as M;
    }
    if (<AppInitAgreement>[] is M) {
      return data.map<AppInitAgreement>((Map<String, dynamic> e) =>
          AppInitAgreement.fromJson(e)).toList() as M;
    }
    if (<AppInitAbout>[] is M) {
      return data.map<AppInitAbout>((Map<String, dynamic> e) =>
          AppInitAbout.fromJson(e)).toList() as M;
    }
    if (<AppInitShareParams>[] is M) {
      return data.map<AppInitShareParams>((Map<String, dynamic> e) =>
          AppInitShareParams.fromJson(e)).toList() as M;
    }
    if (<AppInitWebview>[] is M) {
      return data.map<AppInitWebview>((Map<String, dynamic> e) =>
          AppInitWebview.fromJson(e)).toList() as M;
    }
    if (<AppInitWebviewService>[] is M) {
      return data.map<AppInitWebviewService>((Map<String, dynamic> e) =>
          AppInitWebviewService.fromJson(e)).toList() as M;
    }
    if (<AppVersionEntity>[] is M) {
      return data.map<AppVersionEntity>((Map<String, dynamic> e) =>
          AppVersionEntity.fromJson(e)).toList() as M;
    }
    if (<AutoRenewalEntity>[] is M) {
      return data.map<AutoRenewalEntity>((Map<String, dynamic> e) =>
          AutoRenewalEntity.fromJson(e)).toList() as M;
    }
    if (<BaseListEntity>[] is M) {
      return data.map<BaseListEntity>((Map<String, dynamic> e) =>
          BaseListEntity.fromJson(e)).toList() as M;
    }
    if (<BaseListEnum>[] is M) {
      return data.map<BaseListEnum>((Map<String, dynamic> e) =>
          BaseListEnum.fromJson(e)).toList() as M;
    }
    if (<BaseListTypeEnum>[] is M) {
      return data.map<BaseListTypeEnum>((Map<String, dynamic> e) =>
          BaseListTypeEnum.fromJson(e)).toList() as M;
    }
    if (<CheckFileEntity>[] is M) {
      return data.map<CheckFileEntity>((Map<String, dynamic> e) =>
          CheckFileEntity.fromJson(e)).toList() as M;
    }
    if (<CodeListEntity>[] is M) {
      return data.map<CodeListEntity>((Map<String, dynamic> e) =>
          CodeListEntity.fromJson(e)).toList() as M;
    }
    if (<CreateOrderEntity>[] is M) {
      return data.map<CreateOrderEntity>((Map<String, dynamic> e) =>
          CreateOrderEntity.fromJson(e)).toList() as M;
    }
    if (<CreateOrderPayArray>[] is M) {
      return data.map<CreateOrderPayArray>((Map<String, dynamic> e) =>
          CreateOrderPayArray.fromJson(e)).toList() as M;
    }
    if (<CreateOrderPayWechat>[] is M) {
      return data.map<CreateOrderPayWechat>((Map<String, dynamic> e) =>
          CreateOrderPayWechat.fromJson(e)).toList() as M;
    }
    if (<DiskDirEntity>[] is M) {
      return data.map<DiskDirEntity>((Map<String, dynamic> e) =>
          DiskDirEntity.fromJson(e)).toList() as M;
    }
    if (<DiskFileDetailEntity>[] is M) {
      return data.map<DiskFileDetailEntity>((Map<String, dynamic> e) =>
          DiskFileDetailEntity.fromJson(e)).toList() as M;
    }
    if (<DiskFileEntity>[] is M) {
      return data.map<DiskFileEntity>((Map<String, dynamic> e) =>
          DiskFileEntity.fromJson(e)).toList() as M;
    }
    if (<FilePreEntity>[] is M) {
      return data.map<FilePreEntity>((Map<String, dynamic> e) =>
          FilePreEntity.fromJson(e)).toList() as M;
    }
    if (<LoginUserEntity>[] is M) {
      return data.map<LoginUserEntity>((Map<String, dynamic> e) =>
          LoginUserEntity.fromJson(e)).toList() as M;
    }
    if (<MemberEquityEntity>[] is M) {
      return data.map<MemberEquityEntity>((Map<String, dynamic> e) =>
          MemberEquityEntity.fromJson(e)).toList() as M;
    }
    if (<MemberEquityRenewPlan>[] is M) {
      return data.map<MemberEquityRenewPlan>((Map<String, dynamic> e) =>
          MemberEquityRenewPlan.fromJson(e)).toList() as M;
    }
    if (<MemberEquityVipInfo>[] is M) {
      return data.map<MemberEquityVipInfo>((Map<String, dynamic> e) =>
          MemberEquityVipInfo.fromJson(e)).toList() as M;
    }
    if (<MemberEquityConfigInfo>[] is M) {
      return data.map<MemberEquityConfigInfo>((Map<String, dynamic> e) =>
          MemberEquityConfigInfo.fromJson(e)).toList() as M;
    }
    if (<MemberProductsEntity>[] is M) {
      return data.map<MemberProductsEntity>((Map<String, dynamic> e) =>
          MemberProductsEntity.fromJson(e)).toList() as M;
    }
    if (<MemberProductsCoupon>[] is M) {
      return data.map<MemberProductsCoupon>((Map<String, dynamic> e) =>
          MemberProductsCoupon.fromJson(e)).toList() as M;
    }
    if (<NoticeEntity>[] is M) {
      return data.map<NoticeEntity>((Map<String, dynamic> e) =>
          NoticeEntity.fromJson(e)).toList() as M;
    }
    if (<OptionEntity>[] is M) {
      return data.map<OptionEntity>((Map<String, dynamic> e) =>
          OptionEntity.fromJson(e)).toList() as M;
    }
    if (<PayEntity>[] is M) {
      return data.map<PayEntity>((Map<String, dynamic> e) =>
          PayEntity.fromJson(e)).toList() as M;
    }
    if (<PreloginEntity>[] is M) {
      return data.map<PreloginEntity>((Map<String, dynamic> e) =>
          PreloginEntity.fromJson(e)).toList() as M;
    }
    if (<PreviewEntity>[] is M) {
      return data.map<PreviewEntity>((Map<String, dynamic> e) =>
          PreviewEntity.fromJson(e)).toList() as M;
    }
    if (<RecycleListEntity>[] is M) {
      return data.map<RecycleListEntity>((Map<String, dynamic> e) =>
          RecycleListEntity.fromJson(e)).toList() as M;
    }
    if (<SearchInitEntity>[] is M) {
      return data.map<SearchInitEntity>((Map<String, dynamic> e) =>
          SearchInitEntity.fromJson(e)).toList() as M;
    }
    if (<SearchInitEnum>[] is M) {
      return data.map<SearchInitEnum>((Map<String, dynamic> e) =>
          SearchInitEnum.fromJson(e)).toList() as M;
    }
    if (<SearchTypeEnum>[] is M) {
      return data.map<SearchTypeEnum>((Map<String, dynamic> e) =>
          SearchTypeEnum.fromJson(e)).toList() as M;
    }
    if (<SearchResultEntity>[] is M) {
      return data.map<SearchResultEntity>((Map<String, dynamic> e) =>
          SearchResultEntity.fromJson(e)).toList() as M;
    }
    if (<SearchResultList>[] is M) {
      return data.map<SearchResultList>((Map<String, dynamic> e) =>
          SearchResultList.fromJson(e)).toList() as M;
    }
    if (<SearchResultEnum>[] is M) {
      return data.map<SearchResultEnum>((Map<String, dynamic> e) =>
          SearchResultEnum.fromJson(e)).toList() as M;
    }
    if (<SearchResultEnumDataType>[] is M) {
      return data.map<SearchResultEnumDataType>((Map<String, dynamic> e) =>
          SearchResultEnumDataType.fromJson(e)).toList() as M;
    }
    if (<ShareCodeEntity>[] is M) {
      return data.map<ShareCodeEntity>((Map<String, dynamic> e) =>
          ShareCodeEntity.fromJson(e)).toList() as M;
    }
    if (<ShareDataEntity>[] is M) {
      return data.map<ShareDataEntity>((Map<String, dynamic> e) =>
          ShareDataEntity.fromJson(e)).toList() as M;
    }
    if (<SocketEntity>[] is M) {
      return data.map<SocketEntity>((Map<String, dynamic> e) =>
          SocketEntity.fromJson(e)).toList() as M;
    }
    if (<StsEntity>[] is M) {
      return data.map<StsEntity>((Map<String, dynamic> e) =>
          StsEntity.fromJson(e)).toList() as M;
    }
    if (<TransferRecordEntity>[] is M) {
      return data.map<TransferRecordEntity>((Map<String, dynamic> e) =>
          TransferRecordEntity.fromJson(e)).toList() as M;
    }
    if (<TransferRecordList>[] is M) {
      return data.map<TransferRecordList>((Map<String, dynamic> e) =>
          TransferRecordList.fromJson(e)).toList() as M;
    }
    if (<TransferRecordReport>[] is M) {
      return data.map<TransferRecordReport>((Map<String, dynamic> e) =>
          TransferRecordReport.fromJson(e)).toList() as M;
    }
    if (<UnzipEntity>[] is M) {
      return data.map<UnzipEntity>((Map<String, dynamic> e) =>
          UnzipEntity.fromJson(e)).toList() as M;
    }
    if (<UnzipProgressEntity>[] is M) {
      return data.map<UnzipProgressEntity>((Map<String, dynamic> e) =>
          UnzipProgressEntity.fromJson(e)).toList() as M;
    }
    if (<UploadFileEntity>[] is M) {
      return data.map<UploadFileEntity>((Map<String, dynamic> e) =>
          UploadFileEntity.fromJson(e)).toList() as M;
    }
    if (<VipPowersEntity>[] is M) {
      return data.map<VipPowersEntity>((Map<String, dynamic> e) =>
          VipPowersEntity.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxUploadSize>[] is M) {
      return data.map<VipPowersMaxUploadSize>((Map<String, dynamic> e) =>
          VipPowersMaxUploadSize.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxUploadSizeVip0>[] is M) {
      return data.map<VipPowersMaxUploadSizeVip0>((Map<String, dynamic> e) =>
          VipPowersMaxUploadSizeVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxUploadSizeVip1>[] is M) {
      return data.map<VipPowersMaxUploadSizeVip1>((Map<String, dynamic> e) =>
          VipPowersMaxUploadSizeVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxDownloadSpeed>[] is M) {
      return data.map<VipPowersMaxDownloadSpeed>((Map<String, dynamic> e) =>
          VipPowersMaxDownloadSpeed.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxDownloadSpeedVip0>[] is M) {
      return data.map<VipPowersMaxDownloadSpeedVip0>((Map<String, dynamic> e) =>
          VipPowersMaxDownloadSpeedVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxDownloadSpeedVip1>[] is M) {
      return data.map<VipPowersMaxDownloadSpeedVip1>((Map<String, dynamic> e) =>
          VipPowersMaxDownloadSpeedVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxTaskDownload>[] is M) {
      return data.map<VipPowersMaxTaskDownload>((Map<String, dynamic> e) =>
          VipPowersMaxTaskDownload.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxTaskDownloadVip0>[] is M) {
      return data.map<VipPowersMaxTaskDownloadVip0>((Map<String, dynamic> e) =>
          VipPowersMaxTaskDownloadVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxTaskDownloadVip1>[] is M) {
      return data.map<VipPowersMaxTaskDownloadVip1>((Map<String, dynamic> e) =>
          VipPowersMaxTaskDownloadVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxTaskUpload>[] is M) {
      return data.map<VipPowersMaxTaskUpload>((Map<String, dynamic> e) =>
          VipPowersMaxTaskUpload.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxTaskUploadVip0>[] is M) {
      return data.map<VipPowersMaxTaskUploadVip0>((Map<String, dynamic> e) =>
          VipPowersMaxTaskUploadVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxTaskUploadVip1>[] is M) {
      return data.map<VipPowersMaxTaskUploadVip1>((Map<String, dynamic> e) =>
          VipPowersMaxTaskUploadVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersBoolPlayOnline>[] is M) {
      return data.map<VipPowersBoolPlayOnline>((Map<String, dynamic> e) =>
          VipPowersBoolPlayOnline.fromJson(e)).toList() as M;
    }
    if (<VipPowersBoolPlayOnlineVip0>[] is M) {
      return data.map<VipPowersBoolPlayOnlineVip0>((Map<String, dynamic> e) =>
          VipPowersBoolPlayOnlineVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersBoolPlayOnlineVip1>[] is M) {
      return data.map<VipPowersBoolPlayOnlineVip1>((Map<String, dynamic> e) =>
          VipPowersBoolPlayOnlineVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersBoolUnzip>[] is M) {
      return data.map<VipPowersBoolUnzip>((Map<String, dynamic> e) =>
          VipPowersBoolUnzip.fromJson(e)).toList() as M;
    }
    if (<VipPowersBoolUnzipVip0>[] is M) {
      return data.map<VipPowersBoolUnzipVip0>((Map<String, dynamic> e) =>
          VipPowersBoolUnzipVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersBoolUnzipVip1>[] is M) {
      return data.map<VipPowersBoolUnzipVip1>((Map<String, dynamic> e) =>
          VipPowersBoolUnzipVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxDisk>[] is M) {
      return data.map<VipPowersMaxDisk>((Map<String, dynamic> e) =>
          VipPowersMaxDisk.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxDiskVip0>[] is M) {
      return data.map<VipPowersMaxDiskVip0>((Map<String, dynamic> e) =>
          VipPowersMaxDiskVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersMaxDiskVip1>[] is M) {
      return data.map<VipPowersMaxDiskVip1>((Map<String, dynamic> e) =>
          VipPowersMaxDiskVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersRecycleExpiredDays>[] is M) {
      return data.map<VipPowersRecycleExpiredDays>((Map<String, dynamic> e) =>
          VipPowersRecycleExpiredDays.fromJson(e)).toList() as M;
    }
    if (<VipPowersRecycleExpiredDaysVip0>[] is M) {
      return data.map<VipPowersRecycleExpiredDaysVip0>((
          Map<String, dynamic> e) =>
          VipPowersRecycleExpiredDaysVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersRecycleExpiredDaysVip1>[] is M) {
      return data.map<VipPowersRecycleExpiredDaysVip1>((
          Map<String, dynamic> e) =>
          VipPowersRecycleExpiredDaysVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersCodeMaxFiles>[] is M) {
      return data.map<VipPowersCodeMaxFiles>((Map<String, dynamic> e) =>
          VipPowersCodeMaxFiles.fromJson(e)).toList() as M;
    }
    if (<VipPowersCodeMaxFilesVip0>[] is M) {
      return data.map<VipPowersCodeMaxFilesVip0>((Map<String, dynamic> e) =>
          VipPowersCodeMaxFilesVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersCodeMaxFilesVip1>[] is M) {
      return data.map<VipPowersCodeMaxFilesVip1>((Map<String, dynamic> e) =>
          VipPowersCodeMaxFilesVip1.fromJson(e)).toList() as M;
    }
    if (<VipPowersCodeLimitDays>[] is M) {
      return data.map<VipPowersCodeLimitDays>((Map<String, dynamic> e) =>
          VipPowersCodeLimitDays.fromJson(e)).toList() as M;
    }
    if (<VipPowersCodeLimitDaysVip0>[] is M) {
      return data.map<VipPowersCodeLimitDaysVip0>((Map<String, dynamic> e) =>
          VipPowersCodeLimitDaysVip0.fromJson(e)).toList() as M;
    }
    if (<VipPowersCodeLimitDaysVip1>[] is M) {
      return data.map<VipPowersCodeLimitDaysVip1>((Map<String, dynamic> e) =>
          VipPowersCodeLimitDaysVip1.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AppInitEntity).toString(): AppInitEntity.fromJson,
    (AppInitAgreement).toString(): AppInitAgreement.fromJson,
    (AppInitAbout).toString(): AppInitAbout.fromJson,
    (AppInitShareParams).toString(): AppInitShareParams.fromJson,
    (AppInitWebview).toString(): AppInitWebview.fromJson,
    (AppInitWebviewService).toString(): AppInitWebviewService.fromJson,
    (AppVersionEntity).toString(): AppVersionEntity.fromJson,
    (AutoRenewalEntity).toString(): AutoRenewalEntity.fromJson,
    (BaseListEntity).toString(): BaseListEntity.fromJson,
    (BaseListEnum).toString(): BaseListEnum.fromJson,
    (BaseListTypeEnum).toString(): BaseListTypeEnum.fromJson,
    (CheckFileEntity).toString(): CheckFileEntity.fromJson,
    (CodeListEntity).toString(): CodeListEntity.fromJson,
    (CreateOrderEntity).toString(): CreateOrderEntity.fromJson,
    (CreateOrderPayArray).toString(): CreateOrderPayArray.fromJson,
    (CreateOrderPayWechat).toString(): CreateOrderPayWechat.fromJson,
    (DiskDirEntity).toString(): DiskDirEntity.fromJson,
    (DiskFileDetailEntity).toString(): DiskFileDetailEntity.fromJson,
    (DiskFileEntity).toString(): DiskFileEntity.fromJson,
    (FilePreEntity).toString(): FilePreEntity.fromJson,
    (LoginUserEntity).toString(): LoginUserEntity.fromJson,
    (MemberEquityEntity).toString(): MemberEquityEntity.fromJson,
    (MemberEquityRenewPlan).toString(): MemberEquityRenewPlan.fromJson,
    (MemberEquityVipInfo).toString(): MemberEquityVipInfo.fromJson,
    (MemberEquityConfigInfo).toString(): MemberEquityConfigInfo.fromJson,
    (MemberProductsEntity).toString(): MemberProductsEntity.fromJson,
    (MemberProductsCoupon).toString(): MemberProductsCoupon.fromJson,
    (NoticeEntity).toString(): NoticeEntity.fromJson,
    (OptionEntity).toString(): OptionEntity.fromJson,
    (PayEntity).toString(): PayEntity.fromJson,
    (PreloginEntity).toString(): PreloginEntity.fromJson,
    (PreviewEntity).toString(): PreviewEntity.fromJson,
    (RecycleListEntity).toString(): RecycleListEntity.fromJson,
    (SearchInitEntity).toString(): SearchInitEntity.fromJson,
    (SearchInitEnum).toString(): SearchInitEnum.fromJson,
    (SearchTypeEnum).toString(): SearchTypeEnum.fromJson,
    (SearchResultEntity).toString(): SearchResultEntity.fromJson,
    (SearchResultList).toString(): SearchResultList.fromJson,
    (SearchResultEnum).toString(): SearchResultEnum.fromJson,
    (SearchResultEnumDataType).toString(): SearchResultEnumDataType.fromJson,
    (ShareCodeEntity).toString(): ShareCodeEntity.fromJson,
    (ShareDataEntity).toString(): ShareDataEntity.fromJson,
    (SocketEntity).toString(): SocketEntity.fromJson,
    (StsEntity).toString(): StsEntity.fromJson,
    (TransferRecordEntity).toString(): TransferRecordEntity.fromJson,
    (TransferRecordList).toString(): TransferRecordList.fromJson,
    (TransferRecordReport).toString(): TransferRecordReport.fromJson,
    (UnzipEntity).toString(): UnzipEntity.fromJson,
    (UnzipProgressEntity).toString(): UnzipProgressEntity.fromJson,
    (UploadFileEntity).toString(): UploadFileEntity.fromJson,
    (VipPowersEntity).toString(): VipPowersEntity.fromJson,
    (VipPowersMaxUploadSize).toString(): VipPowersMaxUploadSize.fromJson,
    (VipPowersMaxUploadSizeVip0).toString(): VipPowersMaxUploadSizeVip0
        .fromJson,
    (VipPowersMaxUploadSizeVip1).toString(): VipPowersMaxUploadSizeVip1
        .fromJson,
    (VipPowersMaxDownloadSpeed).toString(): VipPowersMaxDownloadSpeed.fromJson,
    (VipPowersMaxDownloadSpeedVip0).toString(): VipPowersMaxDownloadSpeedVip0
        .fromJson,
    (VipPowersMaxDownloadSpeedVip1).toString(): VipPowersMaxDownloadSpeedVip1
        .fromJson,
    (VipPowersMaxTaskDownload).toString(): VipPowersMaxTaskDownload.fromJson,
    (VipPowersMaxTaskDownloadVip0).toString(): VipPowersMaxTaskDownloadVip0
        .fromJson,
    (VipPowersMaxTaskDownloadVip1).toString(): VipPowersMaxTaskDownloadVip1
        .fromJson,
    (VipPowersMaxTaskUpload).toString(): VipPowersMaxTaskUpload.fromJson,
    (VipPowersMaxTaskUploadVip0).toString(): VipPowersMaxTaskUploadVip0
        .fromJson,
    (VipPowersMaxTaskUploadVip1).toString(): VipPowersMaxTaskUploadVip1
        .fromJson,
    (VipPowersBoolPlayOnline).toString(): VipPowersBoolPlayOnline.fromJson,
    (VipPowersBoolPlayOnlineVip0).toString(): VipPowersBoolPlayOnlineVip0
        .fromJson,
    (VipPowersBoolPlayOnlineVip1).toString(): VipPowersBoolPlayOnlineVip1
        .fromJson,
    (VipPowersBoolUnzip).toString(): VipPowersBoolUnzip.fromJson,
    (VipPowersBoolUnzipVip0).toString(): VipPowersBoolUnzipVip0.fromJson,
    (VipPowersBoolUnzipVip1).toString(): VipPowersBoolUnzipVip1.fromJson,
    (VipPowersMaxDisk).toString(): VipPowersMaxDisk.fromJson,
    (VipPowersMaxDiskVip0).toString(): VipPowersMaxDiskVip0.fromJson,
    (VipPowersMaxDiskVip1).toString(): VipPowersMaxDiskVip1.fromJson,
    (VipPowersRecycleExpiredDays).toString(): VipPowersRecycleExpiredDays
        .fromJson,
    (VipPowersRecycleExpiredDaysVip0)
        .toString(): VipPowersRecycleExpiredDaysVip0.fromJson,
    (VipPowersRecycleExpiredDaysVip1)
        .toString(): VipPowersRecycleExpiredDaysVip1.fromJson,
    (VipPowersCodeMaxFiles).toString(): VipPowersCodeMaxFiles.fromJson,
    (VipPowersCodeMaxFilesVip0).toString(): VipPowersCodeMaxFilesVip0.fromJson,
    (VipPowersCodeMaxFilesVip1).toString(): VipPowersCodeMaxFilesVip1.fromJson,
    (VipPowersCodeLimitDays).toString(): VipPowersCodeLimitDays.fromJson,
    (VipPowersCodeLimitDaysVip0).toString(): VipPowersCodeLimitDaysVip0
        .fromJson,
    (VipPowersCodeLimitDaysVip1).toString(): VipPowersCodeLimitDaysVip1
        .fromJson,
    (GuestCoolDownEntity).toString():GuestCoolDownEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}